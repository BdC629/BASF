# -*- mode: nginx; mode: flyspell-prog;  ispell-local-dictionary: "american" -*-
user                 www-data;

## If you're using an Nginx version below 1.3.8 or 1.2. then uncomment
## the line below and set it to the number of cores of the
## server. Otherwise nginx will determine it automatically.
worker_processes auto;
worker_rlimit_nofile 65535;

events {
    multi_accept       on;
    worker_connections 65535;
}

http {
    ## MIME types.
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ## Use sendfile() syscall to speed up I/O operations and speed up
    ## static file serving.
    sendfile             on;

    ## Handling of IPs in proxied and load balancing situations.
    set_real_ip_from 0.0.0.0/32; # all addresses get a real IP.
    real_ip_header X-Forwarded-For; # the ip is forwarded from the load balancer/proxy

    ## Define a zone for limiting the number of simultaneous
    ## connections nginx accepts. 1m means 32000 simultaneous
    ## sessions. We need to define for each server the limit_conn
    ## value refering to this or other zones.
    limit_conn_zone $binary_remote_addr zone=arbeit:10m;

   ## Timeouts.
   client_body_timeout 60;
   client_header_timeout 60;
   keepalive_timeout 10 10;
   send_timeout 60;

   ## Reset lingering timed out connections. Deflect DDoS.
   reset_timedout_connection on;

   ## Body size.
   client_max_body_size 10m;

   ## TCP options.
   tcp_nodelay on;
   ## Optimization of socket handling when using sendfile.
   tcp_nopush on;

   ## Compression.
   gzip on;
   gzip_buffers 16 8k;
   gzip_comp_level 1;
   gzip_http_version 1.1;
   gzip_min_length 10;
   gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/x-icon application/vnd.ms-fontobject font/opentype application/x-font-ttf;
   gzip_vary on;
   gzip_proxied any; # Compression for all requests.
   ## No need for regexps. See
   ## http://wiki.nginx.org/NginxHttpGzipModule#gzip_disable
   gzip_disable msie6;

   ## Serve already compressed files directly, bypassing on-the-fly
   ## compression.
   ##
   # Usually you don't make much use of this. It's better to just
   # enable gzip_static on the locations you need it.
   # gzip_static on;

   ## Hide the Nginx version number.
   server_tokens off;

   ## FastCGI.
   ### fastcgi parameters.
   fastcgi_param QUERY_STRING $query_string;
   fastcgi_param REQUEST_METHOD $request_method;
   fastcgi_param CONTENT_TYPE $content_type;
   fastcgi_param CONTENT_LENGTH $content_length;

   fastcgi_param SCRIPT_NAME $fastcgi_script_name;
   fastcgi_param REQUEST_URI $request_uri;
   fastcgi_param DOCUMENT_URI $document_uri;
   fastcgi_param DOCUMENT_ROOT $document_root;
   fastcgi_param SERVER_PROTOCOL $server_protocol;

   fastcgi_param GATEWAY_INTERFACE CGI/1.1;
   fastcgi_param SERVER_SOFTWARE nginx/$nginx_version;

   fastcgi_param REMOTE_ADDR $remote_addr;
   fastcgi_param REMOTE_PORT $remote_port;
   fastcgi_param SERVER_ADDR $server_addr;
   fastcgi_param SERVER_PORT $server_port;
   fastcgi_param SERVER_NAME $server_name;
   fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

   ## PHP only, required if PHP was built with --enable-force-cgi-redirect
   fastcgi_param REDIRECT_STATUS 200;
   ## HTTPS 'on' parameter.  This requires Nginx version 1.1.11 or
   ## later. The if_not_empty flag was introduced in 1.1.11.  See:
   ## http://nginx.org/en/CHANGES. If using a version that doesn't
   ## support this comment out the line below.
   fastcgi_param HTTPS $fastcgi_https if_not_empty;
   ## For Nginx versions below 1.1.11 uncomment the line below after commenting out the above.
   #fastcgi_param HTTPS $fastcgi_https;

   ## Fix HTTPoxy vulnerability https://httpoxy.org/#mitigate-nginx.
   fastcgi_param HTTP_PROXY '';
   fastcgi_buffers 256 4k;
   fastcgi_intercept_errors on;
   ## allow 4 hrs - pass timeout responsibility to upstream.
   fastcgi_read_timeout 14400;
   fastcgi_index index.php;
   ## Hide the X-Drupal-Cache header provided by Pressflow.
   fastcgi_hide_header 'X-Drupal-Cache';
   ## Hide the Drupal 7 header X-Generator.
   fastcgi_hide_header 'X-Generator';

   ## If using Nginx version >= 1.1.11 then there's a $https variable
   ## that has the value 'on' if the used scheme is https and '' if not.
   ## See: http://trac.nginx.org/nginx/changeset/4380/nginx
   ## http://trac.nginx.org/nginx/changeset/4333/nginx and
   ## http://trac.nginx.org/nginx/changeset/4334/nginx. If using a
   ## previous version then uncomment out the line below.
   #include map_https_fcgi.conf;

   ## Support the X-Forwarded-Proto header for fastcgi.
   map $http_x_forwarded_proto $fastcgi_https {
       default $https;
       http '';
       https on;
   }

    ## Microcache zone definition for FastCGI.
    ### Defining the FastCGI cache zone for the microcache as presented at:
    ## http://fennb.com/microcaching-speed-your-app-up-250x-with-no-n.

    ## If youre using a Nginx version greater than 1.1.1 then you can
    ## tweak the Tweaking of the cache loader parameters.
    ## Cf. http://forum.nginx.org/read.php?21,213197,213209#msg-213209 for
    ## rationale. If you're using a Nginx version lower than 1.1.1 then
    ## comment the line below and use the cache zone configuration below this one.
    #fastcgi_cache_path /var/cache/nginx/microcache levels=1:2 keys_zone=microcache:5M max_size=1G inactive=2h loader_threshold=2592000000 loader_sleep=1 loader_files=100000;

    ## If you're not using a Nginx version greater or equal to 1.1.1 then
    ## comment the above configuration and use this one. No cache loader
    ## tweaking.
    #fastcgi_cache_path /var/cache/nginx/microcache levels=1:2 keys_zone=microcache:5M max_size=1G inactive=2h;

    ## If you're using Apache for handling PHP then comment the line
    ## above and uncomment the line below.
    #include proxy_microcache_zone.conf

    server {
        listen                  8080;
        listen                  [::]:8080;
        server_name             127.0.0.1;
        root                    /var/www/html/docroot;

        # security
        # security headers set by drupal module

        # . files
        location ~ /\.(?!well-known) {
            deny all;
        }

        # index.php
        index                   index.php;

        # assets, media
        location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ {
            expires    7d;
            access_log off;
        }

        # svg, fonts
        location ~* \.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ {
            add_header Access-Control-Allow-Origin "*";
            expires    7d;
            access_log off;
        }

        # gzip
        gzip            on;
        gzip_vary       on;
        gzip_proxied    any;
        gzip_comp_level 6;
        gzip_types      text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }

        # Very rarely should these ever be accessed outside of your lan
        location ~* \.(txt|log)$ {
            allow 192.168.0.0/16;
            deny all;
        }

        location ~ \..*/.*\.php$ {
            return 403;
        }

        ## No no for private
        location ~ ^/sites/.*/private/ {
            return 403;
        }

        # Block access to scripts in site files directory
        location ~ ^/sites/[^/]+/files/.*\.php$ {
            deny all;
        }

        # Allow "Well-Known URIs" as per RFC 5785
        location ~* ^/.well-known/ {
            allow all;
        }

        # Block access to "hidden" files and directories whose names begin with a
        # period. This includes directories used by version control systems such
        # as Subversion or Git to store control files.
        location ~ (^|/)\. {
            return 403;
        }

        location / {
            # try_files $uri @rewrite; # For Drupal <= 6
            try_files $uri /index.php?$query_string; # For Drupal >= 7
        }

        location @rewrite {
            #rewrite ^/(.*)$ /index.php?q=$1; # For Drupal <= 6
            rewrite ^ /index.php; # For Drupal >= 7
        }

        # Don't allow direct access to PHP files in the vendor directory.
        location ~ /vendor/.*\.php$ {
            deny all;
            return 404;
        }

        # Protect files and directories from prying eyes.
        location ~* \.(engine|inc|install|make|module|profile|po|sh|.*sql|theme|twig|tpl(\.php)?|xtmpl|yml)(~|\.sw[op]|\.bak|\.orig|\.save)?$|/(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template|composer\.(json|lock)|web\.config)$|/#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
            deny all;
            return 404;
        }

        # In Drupal 8, we must also match new paths where the '.php' appears in
        # the middle, such as update.php/selection. The rule we use is strict,
        # and only allows this pattern with the update.php front controller.
        # This allows legacy path aliases in the form of
        # blog/index.php/legacy-path to continue to route to Drupal nodes. If
        # you do not have any paths like that, then you might prefer to use a
        # laxer rule, such as:
        #   location ~ \.php(/|$) {
        # The laxer rule will continue to work if Drupal uses this new URL
        # pattern with front controllers other than update.php in a future
        # release.
        location ~ '\.php$|^/update.php' {
            fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
            # Ensure the php file exists. Mitigates CVE-2019-11043
            try_files $fastcgi_script_name =404;
            # Security note: If you're running a version of PHP older than the
            # latest 5.3, you should have "cgi.fix_pathinfo = 0;" in php.ini.
            # See http://serverfault.com/q/627903/94922 for details.
            include fastcgi_params;
            # Block httpoxy attacks. See https://httpoxy.org/.
            fastcgi_param HTTP_PROXY "";
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            fastcgi_param QUERY_STRING $query_string;
            fastcgi_intercept_errors on;
            # PHP 5 socket location.
            #fastcgi_pass unix:/var/run/php5-fpm.sock;
            # PHP 7 socket location.
            #fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
            # fastcgi settings
            fastcgi_pass                  127.0.0.1:9000;
            fastcgi_index                 index.php;
            fastcgi_buffers               8 16k;
            fastcgi_buffer_size           32k;
        }

        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            try_files $uri @rewrite;
            expires max;
            log_not_found off;
        }

        # Fighting with Styles? This little gem is amazing.
        # location ~ ^/sites/.*/files/imagecache/ { # For Drupal <= 6
        location ~ ^/sites/.*/files/styles/ { # For Drupal >= 7
            try_files $uri @rewrite;
        }

        # Handle private files through Drupal. Private file's path can come
        # with a language prefix.
        location ~ ^(/[a-z\-]+)?/system/files/ { # For Drupal >= 7
            try_files $uri /index.php?$query_string;
        }

        # Enforce clean URLs
        # Removes index.php from urls like www.example.com/index.php/my-page --> www.example.com/my-page
        # Could be done with 301 for permanent or other redirect codes.
        if ($request_uri ~* "^(.*/)index\.php/(.*)") {
            return 307 $1$2;
        }
    }

    ## Instance for developer.basf.com
    server {
        server_name dev.localhost;
        root /var/www/html/docroot;
    }

    # Instance for ap.developer.basf.com
    server {
        server_name ap.localhost;
        root /var/www/html/docroot;
    }
}
